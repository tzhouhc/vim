# Header
snippet header
	#ifndef __$1_H__
	#define __$1_H__

	#endif  // __$1_H__

# Debug printing that can be toggled based on #define DEBUG
snippet dprint
	#if DEBUG
	#define DPRINT(fmt, ...)                                             \
		do {                                                         \
			fprintf(stderr, "%d:%s(): " fmt, __LINE__, __func__, \
				##__VA_ARGS__);                              \
		} while (0)
	#else
	#define DPRINT(fmt, ...) \
		do {             \
		} while (0)
	#endif

# perror and exit
snippet pexit
	#define PEXIT(x)                    \
		do {                        \
			perror(x);          \
			ret = EXIT_FAILURE; \
			goto exit;          \
		} while (0)

# print message and exit
snippet dexit
	#define DEXIT(x)                    \
		do {                        \
			fprintf(stderr, x); \
			ret = EXIT_FAILURE; \
			goto exit;          \
		} while (0)

# print current line and func then exit
snippet eexit
	#define EXIT()                                                  \
		do {                                                    \
			fprintf(stderr, "%d:%s\n", __LINE__, __func__); \
			ret = EXIT_FAILURE;                             \
			goto exit;                                      \
		} while (0)

# ensure ret value then exit
snippet do_or_exit
	#define DO_OR_EXIT(func, ...)               \
		do {                                \
			if (func(__VA_ARGS__) != 0) \
				EXIT();             \
		} while (0)


# free and set null iff pointer is not null
snippet do_or_exit
	#define FREE_IF(x)                \
		do {                      \
			if (x) {          \
				free(x);  \
				x = NULL; \
			}                 \
		} while (0)

# rounding
snippet round_up_to_align
	static uint64_t round_up_to_align(uint64_t addr, uint align)
	{
		if (addr % align)
			return ((addr / align) + 1) * align;
		return addr;
	}

# comments
snippet /*
	/* $1 */
