{"Autocommands":{"body":"vim.api.nvim_create_autocmd({ \"BufEnter\" }, {\n  pattern = { \"*.*\" },\n  callback = function()\n  end,\n  group = \"Misc\",\n})","prefix":"autocmd"},"Autocommand Groups":{"body":"vim.api.nvim_create_augroup(\"$1\", { clear = true })","prefix":"autogr"},"hslogger":{"body":"local logger = hs.logger.new(\"$1\", \"debug\")","prefix":"hslogger"},"usercmd":{"prefix":"usercmd","body":["vim.api.nvim_create_user_command(\"CmdName\", function()","  -- vim.cmd(\"SomeCommand\")","end, { range = true })"]},"lazyevent":{"body":"event = { \"BufReadPost\", \"BufNewFile\", \"BufWritePre\" },","prefix":"lazyevent"},"Vim Input UI":{"body":"vim.ui.input({ prompt = \"$1\" }, function(input)\nend)","prefix":"viminput"},"vimmode":{"body":"vim.fn.mode()","prefix":"vimmode"},"keymap":{"body":["vim.keymap.set(","  \"n\",","  \"\",","  \"<cmd><cr>\",","  { noremap = true, silent = true }",")"],"prefix":"keymap"},"Conditional for macos":{"body":"if vim.fn.has(\"macunix\") then\nend","prefix":"ifmac"}}