snippet #! "Shebang"
	#!/usr/bin/env python3

snippet ifmain "Python if-main idiom" b
	if __name__ == "__main__":
		main()

snippet repl "Go into REPL mode"
	import code
	# Set up the interactive interpreter
	variables = locals().copy()
	console = code.InteractiveConsole(variables)
	console.interact()


snippet argparser "Create an argument parser"
	def arg_parser() -> ArgumentParser:
	    parser = ArgumentParser()
	    parser.add_argument("req", help="Required argument")
	    parser.add_argument('-v', '--verbose', action='count', default=0,
	                        help="Increase verbosity (can be used multiple times)")
	    parser.add_argument("--flag", action=BooleanOptionalAction)
	    return parser


snippet logging "Setup a logger"
	def setup_logger(verbosity: int) -> logging.Logger:
	    """
	    Setup logging based on verbosity.

	    verbosity: int -- 0 for warning only, 1 for info, 2 for all
	    """
	    # Create a logger
	    logger = logging.getLogger()
	    # Set the logging level based on verbosity
	    if verbosity == 0:
	        level = logging.WARNING
	    elif verbosity == 1:
	        level = logging.INFO
	    else:
	        level = logging.DEBUG
	    logger.setLevel(level)
	    # Create a console handler and set its level
	    ch = logging.StreamHandler(sys.stderr)
	    ch.setLevel(level)
	    # Create a formatter
	    formatter = logging.Formatter(
	        '%(name)s@%(levelname)s: %(message)s')
	    # Add formatter to ch
	    ch.setFormatter(formatter)
	    # Add ch to logger
	    logger.addHandler(ch)
	    return logger

snippet file-logger "File Logger"
	def setup_file_logger(name: str) -> logging.Logger:
	    """
	    Setup logging based on verbosity.

	    name: str, informs what to name the log file
	    """
	    logger = logging.getLogger('dvr-file')
	    logger.setLevel(logging.INFO)

	    handler = logging.FileHandler(f"log_{name}.txt", mode="w")
	    formatter = logging.Formatter('%(message)s')
	    handler.setFormatter(formatter)
	    logger.addHandler(handler)
	    logger.propagate = False
	    return logger



snippet boolarg "Boolean argument"
	    parser.add_argument('-f', '--flag', action='store_true',
				help="Enable flag behavior")


snippet narg "Multiple repeatable argument"
	      parser.add_argument('-t', '--filter', type=str, action='append',
		      help="Add additional item")


snippet dataclass "Dataclass"
	      from dataclasses import dataclass


	      @dataclass
	      class Segment:
		  def __post_init__(self):
		      pass

snippet reuse-socket
	      sock.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR, 1)
