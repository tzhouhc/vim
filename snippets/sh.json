{
  "ANSI color vars": {
    "prefix": "color",
    "body": "GRAY='\\033[0;90m'\nCYAN='\\033[0;36m'\nMAGENTA='\\033[0;35m'\nBLUE='\\033[0;34m'\nYELLOW='\\033[0;33m'\nGREEN='\\033[0;32m'\nRED='\\033[0;31m'\nNC='\\033[0m'"
  },
  "Subsequent args": {
    "prefix": "argsafter",
    "body": "\\${@:2}"
  },
  "Parse args": {
    "prefix": "zparse",
    "body": "zparseopts -D -E -F -- $1:=$2"
  },
  "flag": {
    "prefix": "flag",
    "body": "f=flag -flag=flag"
  },
  "param": {
    "prefix": "param",
    "body": "p:=param"
  },
  "Stacking flag": {
    "prefix": "flag_stack",
    "body": "p+=flag"
  },
  "Stacking flag count": {
    "prefix": "flag_stack_count",
    "body": "$#flag"
  },
  "Array param": {
    "prefix": "array_param",
    "body": "p+:=param"
  },
  "Strip flag from array param": {
    "prefix": "array_param_strip",
    "body": "args=()\nfor ((i=1; i<${#param}; i+=2)); do\n  args+=(${param[i]})\ndone"
  },
  "check if binary exists": {
    "prefix": "ifbin",
    "body": "if type $1 &>/dev/null; then\nfi"
  },
  "check if cmd returned 0": {
    "prefix": "ifcmd",
    "body": "if $1; then\nfi"
  },
  "check if current os is darwin": {
    "prefix": "ifosx",
    "body": "if uname -a | grep -i darwin &>/dev/null; then\nfi"
  },
  "check if env var is not empty": {
    "prefix": "ifenv",
    "body": "if [[ \\$${1} != '' ]]; then\nfi"
  },
  "check if env var is set": {
    "prefix": "ifvar",
    "body": "if [[ -v $1 ]]; then\nfi"
  },
  "check if file exists": {
    "prefix": "iffile",
    "body": "if [[ -f \"${1:file}\" ]]; then\nfi"
  },
  "check if socket exists": {
    "prefix": "ifsock",
    "body": "if [[ -S \"${1:file}\" ]]; then\nfi"
  },
  "check if folder exists": {
    "prefix": "ifdir",
    "body": "if [[ -d \"${1:dir}\" ]]; then\nfi"
  },
  "check if string has no content": {
    "prefix": "ifempty",
    "body": "if [[ -z \"$1\" ]]; then\nfi"
  },
  "check if string has content": {
    "prefix": "ifstr",
    "body": "if [[ -n \"$1\" ]]; then\nfi"
  },
  "check if string matches regex": {
    "prefix": "ifregex",
    "body": "if [[ \"$1\" =~ \"$2\" ]]; then\nfi"
  },
  "comment chunk": {
    "prefix": "#---",
    "body": "# --------------\n# $1\n# --------------"
  },
  "for each line in input": {
    "prefix": "forline",
    "body": "for line in \\$(<$1); do\ndone"
  },
  "go to directory containing the script": {
    "prefix": "cwd",
    "body": "cd \"\\$(dirname \"\\$0\")\""
  },
  "multiple assignment": {
    "prefix": "read<",
    "body": "read -r $2 <<<\\$($1)"
  },
  "pipe to /dev/null": {
    "prefix": "devnull",
    "body": "&>/dev/null"
  },
  "source common PATH setup": {
    "prefix": "base",
    "body": "source \\$HOME/.zsh/base.zsh"
  }
}
